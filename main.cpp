#include <iostream>
#include <string.h>
#ifdef _WIN32
#include <windows.h>
#else
#include <unistd.h>
#endif
using namespace std;

const int MAX_BUSES = 10;
const int MAX_DAYS = 31;
const double FUEL_TANK_CAPACITY = 100.00; //Gallons
const double MAX_DISTANCE = 500.00; //Miles
const double FUEL_PRICE_PER_GALLON = 3.50; //Dollars
const double FARE_PER_PASSENGER = 5.00; //Dollars

bool authenticate();
void LoadingBar();
void readData(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays);
double totalFuelConsumption(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays);
double totalDistanceTraveled(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays);
int minFuelEfficiency(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays);
double avgFuelEfficiency(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays);
int maxFuelEfficiency(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays);
double totalFuelCost(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays);
double averageSpeed(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays);
void fleetSort(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays, int sortChoice);
void printData(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays);

int main() {
	double data[MAX_BUSES][MAX_DAYS][2];
	int numBuses, numDays; double totalRevenue = 0.00, totalFuel = 0.00, totalDistance = 0.00;
	int maxBusNum, minBusNum;

	cout << "Welcome to University Bus Transportation Service Management System! " << endl << endl;
	cout << "Enter your login credentials:" << endl;
	if (!authenticate()) {
		cout << "\033[1;31m" << endl;
		cout << "Invalid username or password! Exiting program..." << endl;
		cout << "\033[0m" << endl;
		return 0;
	}
	cout << endl;
	cout << "Enter No. of Buses: " << endl;
	cin >> numBuses;
	cout << "Enter No. of Days: " << endl;
	cin >> numDays;

	readData(data, numBuses, numDays);
	maxBusNum = maxFuelEfficiency(data, numBuses, numDays);
	minBusNum = minFuelEfficiency(data, numBuses, numDays);

	cout << endl;

	int choice;

	while (true) {
		cout << "MANAGER'S MENU" << endl << endl;
		cout << "1- Fuel consumption and distance traveled for each bus" << endl;
		cout << "2- Average fuel efficiency for each bus" << endl;
		cout << "3- Bus with the highest fuel efficiency" << endl;
		cout << "4- Total fuel cost and average speed for each bus" << endl;
		cout << "5- Total fuel consumption and distance traveled for all buses" << endl;
		cout << "6- Total revenue generated by the bus transportation service" << endl;
		cout << "7- Bus with the lowest fuel efficiency" << endl;
		cout << "8- Sort the data based on bus number or fuel efficiency" << endl;
		cout << "9- Exit" << endl << endl;

		cout << "Enter your choice: ";
		cin >> choice;

		switch (choice) {
		case 1:
			LoadingBar();
			cout << endl;
			printData(data, numBuses, numDays);
			break;
		case 2:
			LoadingBar();
			cout << endl;
			for (int i = 1; i <= numBuses; i++) {
				cout << "Bus " << i << ": " << avgFuelEfficiency(data, i, numDays) << " miles/gallon" << endl;
			}
			break;
		case 3:
			LoadingBar();
			cout << endl;
			cout << "Bus " << maxBusNum << " has the highest fuel efficiency of " << avgFuelEfficiency(data, maxBusNum, numDays) << " miles/gallon" << endl;
			break;
		case 4:
			LoadingBar();
			cout << endl;
			for (int i = 1; i <= numBuses; i++) {
				double totalFuelCostVal = totalFuelConsumption(data, i, numDays) * FUEL_PRICE_PER_GALLON;
				double avgSpeedVal = averageSpeed(data, i, numDays);
				cout << "Bus " << i << ": Total fuel cost = $" << totalFuelCostVal << ", Average speed = " << avgSpeedVal << " miles/hour" << endl;
			}
			break;
		case 5:
			totalFuel = 0.0;
			totalDistance = 0.0;
			for (int i = 1; i <= numBuses; i++) {
				totalFuel += totalFuelConsumption(data, i, numDays);
				totalDistance += totalDistanceTraveled(data, i, numDays);
			}
			LoadingBar();
			cout << endl;
			cout << "Total fuel consumption for all buses: " << totalFuel << " gallons" << endl;
			cout << "Total distance traveled for all buses: " << totalDistance << " miles" << endl;
			break;
		case 6:
			int numPassengers;
			cout << "Enter the number of passengers: ";
			cin >> numPassengers;
			LoadingBar();
			cout << endl;
			totalRevenue = numPassengers * FARE_PER_PASSENGER;
			cout << "Total revenue for the month of " << numPassengers << " passengers and a fare of $" << FARE_PER_PASSENGER << "/passenger = PKR " << totalRevenue << endl;
			break;
		case 7:
			LoadingBar();
			cout << endl;
			cout << "Bus " << minBusNum << " has the lowest fuel efficiency of " << avgFuelEfficiency(data, minBusNum, numDays) << " miles/gallon" << endl;
			break;
		case 8:
			cout << "1- Sort by Bus No. " << endl;
			cout << "2- Sort by Fuel Efficiency " << endl;
			cout << "Enter Choice: " << endl;
			int sortChoice;
			cin >> sortChoice;
			LoadingBar();
			cout << endl;
			if (sortChoice == 1 || sortChoice == 2) {
				fleetSort(data, numBuses, numDays, sortChoice);
			}
			else {
				cout << "\033[1;31m" << endl;
				cout << "Invalid choice!" << endl;
				cout << "\033[0m" << endl;
			}
			break;
		case 9:
			cout << "Exiting program..." << endl;
			return 0;
		default:
			cout << "\033[1;31m" << endl;
			cout << "Invalid choice!" << endl;
			cout << "\033[0m" << endl;
			break;
		}

		cout << endl;
		cout << "Press enter to continue!";
		cin.ignore();
		cin.get();
	}
	return 0;
}

void readData(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays) {
	for (int i = 0; i < numBuses; i++) {
		cout << endl << "Enter Data of Bus " << i + 1 << ": " << endl << endl;
		for (int j = 0; j < numDays; j++) {
			bool validData = false;
			double fuelConsumption, distanceTraveled;
			do {
				cout << "Day " << j + 1 << ": Fuel consumption (gallons): ";
				cin >> fuelConsumption;
				cout << "Day " << j + 1 << ": Distance traveled (miles): ";
				cin >> distanceTraveled;

				if (fuelConsumption < 0 || fuelConsumption > FUEL_TANK_CAPACITY || distanceTraveled < 0 || distanceTraveled > MAX_DISTANCE) {
					cout << "Invalid data! Please enter valid values." << endl;
				}
				else {
					validData = true;
				}
			} while (!validData);

			data[i][j][0] = fuelConsumption;
			data[i][j][1] = distanceTraveled;
		}
	}
}

double totalFuelConsumption(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays) {
	double totalFuel = 0.0;
	for (int i = 0; i < numDays; i++) {
		totalFuel += data[busNum - 1][i][0];
	}
	return totalFuel;
}

double totalDistanceTraveled(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays) {
	double totalDistance = 0.0;
	for (int i = 0; i < numDays; i++) {
		totalDistance += data[busNum - 1][i][1];
	}
	return totalDistance;
}

int minFuelEfficiency(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays) {
	int minBusNum = 1;
	double minFuelEfficiencyVal = avgFuelEfficiency(data, 1, numDays);
	for (int i = 2; i <= numBuses; i++) {
		double fuelEfficiency = avgFuelEfficiency(data, i, numDays);
		if (fuelEfficiency < minFuelEfficiencyVal) {
			minFuelEfficiencyVal = fuelEfficiency;
			minBusNum = i;
		}
	}
	return minBusNum;
}

double avgFuelEfficiency(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays) {
	double totalFuel = totalFuelConsumption(data, busNum, numDays);
	double totalDistance = totalDistanceTraveled(data, busNum, numDays);
	if (totalFuel > 0) {
		return totalDistance / totalFuel;
	}
	else {
		return 0.0; // Avoid division by zero
	}
}

int maxFuelEfficiency(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays) {
	int maxBusNum = 1;
	double maxFuelEfficiencyVal = avgFuelEfficiency(data, 1, numDays);
	for (int i = 2; i <= numBuses; i++) {
		double fuelEfficiency = avgFuelEfficiency(data, i, numDays);
		if (fuelEfficiency > maxFuelEfficiencyVal) {
			maxFuelEfficiencyVal = fuelEfficiency;
			maxBusNum = i;
		}
	}
	return maxBusNum;
}

double totalFuelCost(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays) {
	double totalFuel = totalFuelConsumption(data, busNum, numDays);
	return totalFuel * FUEL_PRICE_PER_GALLON;
}

double averageSpeed(double data[MAX_BUSES][MAX_DAYS][2], int busNum, int numDays) {
	double totalDistance = totalDistanceTraveled(data, busNum, numDays);
	double totalFuel = totalFuelConsumption(data, busNum, numDays);
	if (totalFuel > 0) {
		return totalDistance / totalFuel;
	}
	else {
		return 0.0; // Avoid division by zero
	}
}

void fleetSort(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays, int sortChoice) {
	for (int i = 0; i < numBuses - 1; i++) {
		for (int j = i + 1; j < numBuses; j++) {
			bool shouldSwap = false;
			if (sortChoice == 1) {
			} else if (sortChoice == 2) {
				if (avgFuelEfficiency(data, i + 1, numDays) > avgFuelEfficiency(data, j + 1, numDays)) {
					shouldSwap = true;
				}
			}

			if (shouldSwap) {
				double temp[MAX_DAYS][2];
				for (int k = 0; k < numDays; k++) {
					temp[k][0] = data[i][k][0];
					temp[k][1] = data[i][k][1];
					data[i][k][0] = data[j][k][0];
					data[i][k][1] = data[j][k][1];
					data[j][k][0] = temp[k][0];
					data[j][k][1] = temp[k][1];
				}
			}
		}
	}
	printData(data, numBuses, numDays);
	cout << endl;
	cout << "Data Sorted by " << (sortChoice == 1 ? "Bus No.!" : "Fuel Efficiency!") << endl;
}

void printData(double data[MAX_BUSES][MAX_DAYS][2], int numBuses, int numDays) {
	for (int i = 0; i < numBuses; i++) {
		cout << "-" << "Bus " << i + 1 << "-" << endl;
		for (int j = 0; j < numDays; j++) {
			cout << endl << "Day " << j + 1 << endl;
			cout << "Fuel consumption: " << data[i][j][0] << " gallons" << endl;
			cout << "Distance traveled: " << data[i][j][1] << " miles" << endl;
		}
		cout << endl;
	}
}

void LoadingBar() {
	cout << "\033[1;32m";
	for (int i = 0; i <= 10; i++) {
		cout << "[";
		for (int j = 0; j < i; j++) {
			cout << "#";
		}
		for (int j = i; j < 10; j++) {
			cout << ".";
		}
		cout << "] " << i * 10 << "%\r";
#ifdef _WIN32
		Sleep(50);
#else
		usleep(50000);
#endif
	}
	cout << endl << "\033[0m";
}

bool authenticate() {
	string username, password;
	cout << endl << "Username: ";
	cin >> username;
	cout << "Password: ";
	cin >> password;

	return (username == "admin" && password == "admin");
}
